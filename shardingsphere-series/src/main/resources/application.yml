spring:
  shardingsphere:
    # 将运行模式配置为Standalone单机模式（Cluster：集群模式）
    mode:
      type: Standalone
      repository:
        type: JDBC

    # 配置多个数据源
    datasource:
      names: ds0,ds1

      # 配置第一个数据源
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db_sharding_01?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false
        username: root
        password: root

      # 配置第二个数据源
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db_sharding_02?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false
        username: root
        password: root
    props:
      sql-show: true
    # 配置分配规则
    rules:
      # 配置索引分片表
      sharding:
        # 首先配置商品表的分片策略
        tables:
          # 声明商品所做的真实节点数据
          shoping:
            actual-data-nodes: ds$->{0..1}.shoping_0$->{0..1}
            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键
                sharding-column: shoping_id
                # 配置分片算法
                sharding-algorithm-name: key-ini-mod
            # 配置分表规则
            table-strategy:
              standard:
                # 配置分表的路由键
                sharding-column: shoping_id
                # 配置算法的实现方式指向自定义的算法类
                sharding-algorithm-name: shop-standard-sharding
            # 配置shoping表的主键生成策略
            key-generate-strategy:
              # 声明主键为shoping_id
              column: shoping_id
              # 同样指向global-id-snowflake这个具体的主键生成策略
              key-generator-name: global-id-snowflake
          # 配置订单表的分片策略
          order:
            # 声明订单表所在的真实数据节点（ds0.order、ds1.order）
            actual-data-nodes: ds$->{0..1}.order
            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键为order_id（数据库中的列名）
                sharding-column: order_id
                # 配置分片算法（使用内置的取模分片算法）
                sharding-algorithm-name: key-ini-mod
            key-generate-strategy:
              column: order_id
              key-generator-name: global-id-snowflake
          order_info:
            actual-data-nodes: ds$->{0..1}.order_info
            database-strategy:
              standard:
                # 配置路由键为order_id（这里的路由键要和订单表一致）
                sharding-column: order_id
                sharding-algorithm-name: key-ini-mod
            key-generate-strategy:
              column: order_info_id
              key-generator-name: global-id-snowflake
          # 配置用户详情表的分片策略
          user_info:
            # 声明用户详情表所在的真实数据节点（ds0.user_info、ds1.user_info）
            actual-data-nodes: ds$->{0..1}.user_info
            key-generate-strategy:
              column: user_id
              key-generator-name: global-id-snowflake
        sharding-algorithms:
          # 自定义配置分库算法
          db-inline-mod:
            # 声明是 INLINE 简单类型的分片
            type: INLINE
            props:
              # 选择对shoping_id做取模运算
              algorithm-expression: ds$->{shoping_id % 2}
          key-ini-mod:
            type: MOD
            props:
              sharding-count: 2
          # 配置哈希取模分表算法
          key-hash-mod:
            # 使用内置的哈希取模算法
            type: HASH_MOD
            props:
              # 声明分表的节点数量
              sharding-count: 2
          # 配置一个自定义的 Standard 分片算法
          shop-standard-sharding:
            # 声明使用自定义的算法实现类
            type: CLASS_BASED
            props:
              # 声明分片策略
              strategy: STANDARD
              # 指明算法实现类（配置全限定名）
              algorithmClassName: com.lwh.learning.ss.config.ShopStandardSA
        key-generators:
          # 配置上面的主键生成策略
          global-id-snowflake:
            # 使用内置的雪花算法
            type: SNOWFLAKE
            props:
              # 分配一个工作节点ID（要确保全局唯一）
              work-id: 111
        # 配置绑定表关系
        binding-tables:
          # 配置第一组绑定关系
          - order,order_info
        # 配置广播表
        broadcast-tables:
          - user_info
mybatis:
  mapper-locations: classpath*:/mapper/*.xml